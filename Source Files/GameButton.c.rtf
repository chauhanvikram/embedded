{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf160
{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;\f1\fmodern\fcharset0 CourierNewPS-BoldMT;}
{\colortbl;\red255\green255\blue255;\red160\green32\blue240;\red255\green0\blue255;\red0\green60\blue255;
\red46\green139\blue87;\red58\green57\blue53;\red165\green42\blue53;}
\margl1134\margr1134\margb1134\margt1134\vieww11680\viewh14980\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs20 \cf2 #include <stdint.h>\cf0 \
\cf2 #include <stdbool.h>\cf0 \
\cf2 #include <stdio.h>\cf0 \
\
\cf2 #include\cf0  \cf3 "inc/hw_types.h"\cf0 \
\cf2 #include\cf0  \cf3 "inc/hw_memmap.h"\cf0 \
\cf2 #include\cf0  \cf3 "inc/hw_gpio.h"\cf0 \
\cf2 #include\cf0  \cf3 "inc/hw_sysctl.h"\cf0 \
\cf2 #include\cf0  \cf3 "driverlib/gpio.h"\cf2  \cf0 \
\cf2 #include\cf0  \cf3 "ES_Port.h"\cf0 \
\cf2 #include\cf0  \cf3 "termio.h"\cf0 \
\cf2 #include\cf0  \cf3 "GameManager.h"\cf0 \
\
\cf2 #define ALL_BITS (0xff<<2)\cf0 \
\cf2 #define BUTTON_PORT HWREG(GPIO_PORTF_BASE+(GPIO_O_DATA+ ALL_BITS))\cf0 \
\cf2 #define DEBOUNCE_TIME 500\cf0 \
\cf2 #define BUTTON_ONE_PORT GPIO_PIN_3\cf0 \
\cf2 #define BUTTON_TWO_PORT GPIO_PIN_4\cf0 \
\
\
\pard\pardeftab720
\cf4 /****************************************************************************\cf0 \
\cf4  Game Button Module\cf0 \
\cf4    From TemplateFSM.c\cf0 \
\
\cf4  Revision\cf0 \
\cf4    1.0.1\cf0 \
\
\cf4  Description\cf0 \
\cf4    This is a template file for implementing flat state machines under the\cf0 \
\cf4    Gen2 Events and Services Framework.\cf0 \
\
\cf4  Notes\cf0 \
\
\cf4  History\cf0 \
\cf4  When           Who     What/Why\cf0 \
\cf4  -------------- ---     --------\cf0 \
\cf4  01/15/12 11:12 jec      revisions for Gen2 framework\cf0 \
\cf4  11/07/11 11:26 jec      made the queue static\cf0 \
\cf4  10/30/11 17:59 jec      fixed references to CurrentEvent in RunTemplateSM()\cf0 \
\cf4  10/23/11 18:20 jec      began conversion from SMTemplate.c (02/20/07 rev)\cf0 \
\cf4 ****************************************************************************/\cf0 \
\cf4 /*----------------------------- Include Files -----------------------------*/\cf0 \
\cf4 /* include header files for this state machine as well as any machines at the\cf0 \
\cf4    next lower level in the hierarchy that are sub-machines to this machine\cf0 \
\cf4 */\cf0 \
\pard\pardeftab720
\cf2 #include\cf0  \cf3 "ES_Configure.h"\cf0 \
\cf2 #include\cf0  \cf3 "ES_Framework.h"\cf0 \
\cf2 #include\cf0  \cf3 "GameButton.h"\cf0 \
\
\pard\pardeftab720
\cf4 /*----------------------------- Module Defines ----------------------------*/\cf0 \
\
\cf4 /*---------------------------- Module Functions ---------------------------*/\cf0 \
\cf4 /* prototypes for private functions for this machine.They should be functions\cf0 \
\cf4    relevant to the behavior of this state machine\cf0 \
\cf4 */\cf0 \
\
\cf4 /*---------------------------- Module Variables ---------------------------*/\cf0 \
\cf4 // everybody needs a state variable, you may need others as well.\cf0 \
\cf4 // type of state variable should match htat of enum in header file\cf0 \
\pard\pardeftab720
\cf5 static\cf0  \cf6 GameButtonState_t CurrentState;\cf0 \
\
\pard\pardeftab720
\cf4 // with the introduction of Gen2, we need a module level Priority var as well\cf0 \
\pard\pardeftab720
\cf5 static uint8_t\cf0  \cf6 MyPriority;\cf0 \
\
\
\pard\pardeftab720
\cf4 /*------------------------------ Module Code ------------------------------*/\cf0 \
\cf4 /****************************************************************************\cf0 \
\cf4  Function\cf0 \
\cf4      InitTemplateFSM\cf0 \
\
\cf4  Parameters\cf0 \
\cf4      uint8_t : the priorty of this service\cf0 \
\
\cf4  Returns\cf0 \
\cf4      bool, false if error in initialization, true otherwise\cf0 \
\
\cf4  Description\cf0 \
\cf4      Saves away the priority, sets up the initial transition and does any\cf0 \
\cf4      other required initialization for this state machine\cf0 \
\cf4  Notes\cf0 \
\
\cf4  Author\cf0 \
\cf4      J. Edward Carryer, 10/23/11, 18:55\cf0 \
\cf4 ****************************************************************************/\cf0 \
\pard\pardeftab720
\cf5 bool\cf0  
\f1\b \cf6 InitializeGameButton
\f0\b0 \cf6 (\cf5 uint8_t\cf0  \cf6 Priority)\cf0 \
\pard\pardeftab720
\cf6 \{\cf0 \
\cf6   MyPriority\cf0  \cf6 =\cf0  \cf6 Priority;\cf0 \
\cf6 	\
  CurrentState\cf0  \cf6 =\cf0  \cf6 Sampling;\cf0 \
	\
	
\f1\b \cf6 HWREG
\f0\b0 \cf6 (SYSCTL_RCGCGPIO) |=\cf0  \cf6 SYSCTL_RCGCGPIO_R5;\cf0  \cf4 //Port F  \cf0 \
	
\f1\b \cf6 HWREG
\f0\b0 \cf6 (GPIO_PORTF_BASE+GPIO_O_DEN)|= (BUTTON_ONE_PORT\cf0  \cf6 |\cf0  \cf6 BUTTON_TWO_PORT);\cf0 \
	
\f1\b \cf6 HWREG
\f0\b0 \cf6 (GPIO_PORTF_BASE+GPIO_O_DIR) &= ~(BUTTON_ONE_PORT\cf0  \cf6 |\cf0  \cf6 BUTTON_TWO_PORT);\cf0 \
	\
  \cf7 return true\cf6 ;\cf0 \
\cf6 \}\cf0 \
\
\pard\pardeftab720
\cf4 /****************************************************************************\cf0 \
\cf4  Function\cf0 \
\cf4      PostButtonDebounceSM\cf0 \
\
\cf4  Parameters\cf0 \
\cf4      ES_Event ThisEvent , the event to post to the queue\cf0 \
\
\cf4  Returns\cf0 \
\cf4      boolean False if the Enqueue operation failed, True otherwise\cf0 \
\
\cf4  Description\cf0 \
\cf4      Posts an event to this state machine's queue\cf0 \
\cf4  Notes\cf0 \
\
\cf4  Author\cf0 \
\cf4      J. Edward Carryer, 10/23/11, 19:25\cf0 \
\cf4 ****************************************************************************/\cf0 \
\pard\pardeftab720
\cf5 bool\cf0  
\f1\b \cf6 PostGameButtonDebounceSM
\f0\b0 \cf6 (\cf0  \cf6 ES_Event ThisEvent\cf0  \cf6 )\cf0 \
\pard\pardeftab720
\cf6 \{\cf0 \
  \cf7 return\cf0  
\f1\b \cf6 ES_PostToService
\f0\b0 \cf6 (\cf0  \cf6 MyPriority,\cf0  \cf6 ThisEvent);\cf0 \
\cf6 \}\cf0 \
\
\pard\pardeftab720
\cf4 /****************************************************************************\cf0 \
\cf4  Function\cf0 \
\cf4     RunButtonDebounceSM\cf0 \
\
\cf4  Parameters\cf0 \
\cf4    ES_Event : the event to process\cf0 \
\
\cf4  Returns\cf0 \
\cf4    ES_Event, ES_NO_EVENT if no error ES_ERROR otherwise\cf0 \
\
\cf4  Description\cf0 \
\cf4    add your description here\cf0 \
\cf4  Notes\cf0 \
\cf4    uses nested switch/case to implement the machine.\cf0 \
\cf4  Author\cf0 \
\cf4    J. Edward Carryer, 01/15/12, 15:23\cf0 \
\cf4 ****************************************************************************/\cf6 \
ES_Event\cf0  
\f1\b \cf6 RunGameButtonDebounceSM
\f0\b0 \cf6 (\cf0  \cf6 ES_Event ThisEvent\cf0  \cf6 )\cf0 \
\pard\pardeftab720
\cf6 \{\cf0 \
\cf6   ES_Event ReturnEvent;\cf0 \
\cf6   ReturnEvent.EventType\cf0  \cf6 =\cf0  \cf6 ES_NO_EVENT;\cf0  \cf4 // assume no errors\cf0 \
\
  \cf7 switch\cf6 (CurrentState)\cf0 \
	\cf6 \{\cf0 \
		\cf7 case\cf0  \cf6 Sampling:\cf0       \
      \cf7 if\cf6 (ThisEvent.EventType\cf0  \cf6 ==\cf0  \cf6 GameButtonOneDown) \{ //Player one pressed button one, post event to game manager\cf0 \
					
\f1\b \cf6 ES_Timer_InitTimer
\f0\b0 \cf6 (GAME_BUTTON_ONE_DEBOUNCE_TIMER,\cf0  \cf6 DEBOUNCE_TIME);\cf0 \
\cf6           CurrentState\cf0  \cf6 =\cf0  \cf6 DebouncingButtonOne;\cf0 \
\cf6 					ES_Event ButtonDown;\cf0 \
\cf6 					ButtonDown.EventType\cf0  \cf6 =\cf0  \cf6 PlayerOneButton;\cf0 \
					
\f1\b \cf6 PostGameManager
\f0\b0 \cf6 (ButtonDown);\cf0 \
			\cf6 \}\cf0  \cf7 else if\cf6 (ThisEvent.EventType\cf0  \cf6 ==\cf0  \cf6 GameButtonTwoDown) \{ //Player one pressed button two, post event to game manager\cf0 \
					
\f1\b \cf6 ES_Timer_InitTimer
\f0\b0 \cf6 (GAME_BUTTON_TWO_DEBOUNCE_TIMER,\cf0  \cf6 DEBOUNCE_TIME);\cf0 \
\cf6           CurrentState\cf0  \cf6 =\cf0  \cf6 DebouncingButtonTwo;\cf0 \
\cf6 					ES_Event ButtonDown;\cf0 \
\cf6 					ButtonDown.EventType\cf0  \cf6 =\cf0  \cf6 PlayerTwoButton;\cf0 \
					
\f1\b \cf6 PostGameManager
\f0\b0 \cf6 (ButtonDown);\cf0 \
			\cf6 \}\cf0 \
			\cf7 break\cf6 ;\cf0 \
		\
		\cf7 case\cf0  \cf6 DebouncingButtonOne:\cf0        \cf4 // If current state is debouncing one\cf0 \
			\cf7 if\cf0  \cf6 (ThisEvent.EventType\cf0  \cf6 ==\cf0  \cf6 ES_TIMEOUT\cf0  \cf6 &&\cf0  \cf6 ThisEvent.EventParam\cf0  \cf6 ==\cf0  \cf6 GAME_BUTTON_ONE_DEBOUNCE_TIMER) \{\cf0  \cf4 // only respond to ES_Timeout from player one\cf0 \
\cf6 				CurrentState\cf0  \cf6 =\cf0  \cf6 Sampling;\cf0 \
      \cf6 \}\cf0  \cf7 else if\cf6 (ThisEvent.EventType\cf0  \cf6 ==\cf0  \cf6 GameButtonTwoDown) \{ // keep looking for player two presses\cf0 \
				
\f1\b \cf6 ES_Timer_InitTimer
\f0\b0 \cf6 (GAME_BUTTON_TWO_DEBOUNCE_TIMER,\cf0  \cf6 DEBOUNCE_TIME);\cf0 \
\cf6 				CurrentState\cf0  \cf6 =\cf0  \cf6 DebouncingBoth;\cf0 \
\cf6 				ES_Event ButtonDown;\cf0 \
\cf6 				ButtonDown.EventType\cf0  \cf6 =\cf0  \cf6 PlayerTwoButton;\cf0 \
				
\f1\b \cf6 PostGameManager
\f0\b0 \cf6 (ButtonDown);\cf0 \
			\cf6 \}\cf0 \
      \cf7 break\cf6 ;\cf0 \
			\
		\cf7 case\cf0  \cf6 DebouncingButtonTwo:\cf0        \cf4 // If current state is debouncing two\cf0 \
			\cf7 if\cf0  \cf6 (ThisEvent.EventType\cf0  \cf6 ==\cf0  \cf6 ES_TIMEOUT\cf0  \cf6 &&\cf0  \cf6 ThisEvent.EventParam\cf0  \cf6 ==\cf0  \cf6 GAME_BUTTON_TWO_DEBOUNCE_TIMER) \{\cf0  \cf4 // only respond to ES_Timeout from player two\cf0 \
\cf6 				CurrentState\cf0  \cf6 =\cf0  \cf6 Sampling;\cf0 \
      \cf6 \}\cf0  \cf7 else if\cf6 (ThisEvent.EventType\cf0  \cf6 ==\cf0  \cf6 GameButtonOneDown) \{ //keep looking for player one presses\cf0 \
				
\f1\b \cf6 ES_Timer_InitTimer
\f0\b0 \cf6 (GAME_BUTTON_ONE_DEBOUNCE_TIMER,\cf0  \cf6 DEBOUNCE_TIME);\cf0 \
\cf6 				CurrentState\cf0  \cf6 =\cf0  \cf6 DebouncingBoth;\cf0 \
\cf6 				ES_Event ButtonDown;\cf0 \
\cf6 				ButtonDown.EventType\cf0  \cf6 =\cf0  \cf6 PlayerOneButton;\cf0 \
				
\f1\b \cf6 PostGameManager
\f0\b0 \cf6 (ButtonDown);\cf0 \
			\cf6 \}\cf0 \
      \cf7 break\cf6 ;\cf0 \
			\
		\cf7 case\cf0  \cf6 DebouncingBoth:\cf0        \cf4 // If current state is debouncing both\cf0 \
			\cf7 if\cf0  \cf6 (ThisEvent.EventType\cf0  \cf6 ==\cf0  \cf6 ES_TIMEOUT)\{ \cf4 // only respond to ES_Timeout\cf0 \
				\cf7 if\cf6 (ThisEvent.EventParam\cf0  \cf6 ==\cf0  \cf6 GAME_BUTTON_TWO_DEBOUNCE_TIMER) \{\cf0  \cf6 							CurrentState\cf0  \cf6 =\cf0  \cf6 DebouncingButtonOne;\cf0 \
				\cf6 \}\cf0  \cf7 else if\cf6 (ThisEvent.EventParam\cf0  \cf6 ==\cf0  \cf6 GAME_BUTTON_ONE_DEBOUNCE_TIMER) \{\cf0 \
\cf6 					CurrentState\cf0  \cf6 =\cf0  \cf6 DebouncingButtonTwo;\cf0 \
				\cf6 \}\cf0 \
			\cf6 \}\cf0 \
      \cf7 break\cf6 ;\cf0 \
\
    \cf7 default\cf6 :\cf0 \
      \cf7 break\cf6 ;\cf0 \
  \cf6 \}\cf0                                    \cf4 // end switch on Current State\cf0 \
  \cf7 return\cf0  \cf6 ReturnEvent;\cf0 \
\cf6 \}\cf0 \
\
\pard\pardeftab720
\cf4 /***************************************************************************\cf0 \
\cf4  private functions\cf0 \
\cf4  ***************************************************************************/\cf0 \
}