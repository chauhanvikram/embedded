{\rtf1\ansi\uc0 \deff1{\fonttbl{\f1\fmodern\fprq1\fcharset0 Courier New;}}{\colortbl;\red255\green255\blue255;\red58\green57\blue53;\red255\green00\blue255;\red255\green00\blue255;\red00\green60\blue255;\red00\green60\blue255;\red255\green00\blue255;\red160\green32\blue240;\red255\green00\blue255;\red60\green59\blue55;\red58\green57\blue53;\red255\green00\blue255;\red165\green42\blue53;\red46\green139\blue87;\red87\green46\blue140;\red58\green57\blue53;}
\paperw11905\paperh16837\margl1134\margr1134\margt1134\margb1134\sectd\plain\f1\fs20
\pard \cbpat1{{\cf2{}}{\cf6{/****************************************************************************}}}\par\pard
\cbpat1{{\cf6{ Module}}}\par\pard
\cbpat1{{\cf6{     ES_Port.h}}}\par\pard
\cbpat1{{\cf6{ Description}}}\par\pard
\cbpat1{{\cf6{     header file to collect all of the hardware/platform dependent info for}}}\par\pard
\cbpat1{{\cf6{     a particular port of the ES framework}}}\par\pard
\cbpat1{{\cf6{ Notes}}}\par\pard
\cbpat1{{\cf6{}}}\par\pard
\cbpat1{{\cf6{ History}}}\par\pard
\cbpat1{{\cf6{ When           Who     What/Why}}}\par\pard
\cbpat1{{\cf6{ -------------- ---     --------}}}\par\pard
\cbpat1{{\cf6{ {0}{8}/{1}{3}/{1}{3} {1}{2}:{1}{2} jec      moved the timer rate constants from ES_Timers.h here}}}\par\pard
\cbpat1{{\cf6{ {0}{8}/{0}{5}/{1}{3} {1}{4}:{2}{4} jec      new version replacing port.h and adding define to}}}\par\pard
\cbpat1{{\cf6{                         capture the C{9}{9} compliant behavior of the compiler}}}\par\pard
\cbpat1{{\cf6{ {0}{3}/{1}{3}/{1}{3}		joa		 Updated files to use with Cortex M{4} processor core.}}}\par\pard
\cbpat1{{\cf6{ 	 	 	 	 	 	 Specifically, this was tested on a TI TM{4}C{1}{2}{3}G mcu.}}}\par\pard
\cbpat1{{\cf6{*****************************************************************************/}}{\cf2{}}}\par\pard
\cbpat1{{\cf8{#ifndef ES_PORT_H}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#define ES_PORT_H}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf5{// pull in the hardware header files that we need}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{//#include <hidef.h>         /* common defines and macros for code warrior */}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{//#include <mc{9}s{1}{2}c{3}{2}.h>     /* derivative information for C{3}{2}*/}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{//#include <S{1}{2}C{3}{2}bits.h>    /* bit definitions  for C{3}{2}*/}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf8{#include <stdio.h>}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include <stdint.h>}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"termio.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"bitdefs.h"}}{\cf8{}}       {\cf6{/* generic bit defs (BIT{0}HI, BIT{0}LO,...) */}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"Bin_Const.h"}}{\cf8{}}     {\cf6{/* macros to specify binary constants in C */}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"ES_Types.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf5{// macro to control the use of C{9}{9} data types (or simulations in case you don't}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{// have a C{9}{9} compiler).}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf5{// Codewarrior V{5}, is not C{9}{9} so keep this commented out for C{3}{2} & E{1}{2}{8}}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#define COMPILER_IS_C{9}{9}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf5{// The macro 'ES_FLASH' is needed on some compilers to allocate const data to }}}\par\pard
\cbpat1{{\cf2{}}{\cf5{// ROM. The macro must be defined, even if it evaluates to nothing.}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{// for the 'C{3}{2} & E{1}{2}{8} this is not needed so it evaluates to nothing}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#define ES_FLASH }}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf5{// the macro 'ES_READ_FLASH_BYTE' is needed on some Harvard machines to generate}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{// code to read a byte from the program space (Flash)}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{// The macro must be defined, even if it evaluates to nothing.}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{// for the 'C{3}{2} & E{1}{2}{8} we don't need special instructions so it evaluates to a}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{// simple reference to the variable}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#define ES_READ_FLASH_BYTE(_flash_var_)    (_flash_var_)                  }}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf5{// these macros provide the wrappers for critical regions, where ints will be off}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{// but the state of the interrupt enable prior to entry will be restored.}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{// allocation of temp var for saving interrupt enable status should be defined}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{// in ES_Port.c}}}\par\pard
\cbpat1{{\cf2{}}{\cf15{extern}} {\cf2{}}{\cf14{unsigned char}} {\cf2{_CCR_temp}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf5{// HCS{1}{2} assembly breakdown.}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{// The Condition Code Register (CCR) contains {5} status indicators, {2} interrupt}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{// masking bits, and a stop instruction disable bit.  }}}\par\pard
\cbpat1{{\cf2{}}{\cf5{// EnterCritical(): {1}) Push CCR to stack {2}) Disable interrupts}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{// {3}) store (CCR) value which is on the stack into the _CCR_temp variable  }}}\par\pard
\cbpat1{{\cf2{}}{\cf5{// EnterCritical breakdown: {1}) move contents of _CCR_temp to stack {2}) restore the contents of }}}\par\pard
\cbpat1{{\cf2{}}{\cf5{// the CCR register from the stack}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{//#define EnterCritical()     \{ __asm pshc; __asm sei; __asm movb {1},SP+,_CCR_temp; \} /* This macro saves CCR register and disables global interrupts. */}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{//#define ExitCritical()  \{ __asm movb _CCR_temp, {1},-SP ; __asm pulc; \} /* This macro restores CCR register saved EnterCritical(). */}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf5{// Cortex M-series processors }}}\par\pard
\cbpat1{{\cf2{}}{\cf5{// The Interrupt Program Status Register (IPSR) contains the exception type number}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{// of the current interrupt service routine (ISR)}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{// Using TivaWare, CPUcpsid() - IntMasterDisable() calls this. Equivalent to __diable_irq()?}}}\par\pard
\cbpat1{{\cf2{}}{\cf15{extern}} {\cf2{}}{\cf14{unsigned int}} {\cf2{_PRIMASK_temp}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{//#pragma FUNC_ALWAYS_INLINE (CPUgetPRIMASK_cpsid);}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{//#pragma FUNC_ALWAYS_INLINE (CPUsetPRIMASK);}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{//extern unsigned int _FAULTMASK_temp;}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf14{uint{3}{2}_t}} {\cf2{}}{\cf16{\b CPUgetFAULTMASK_cpsid\b0 }}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{void}} {\cf2{}}{\cf16{\b CPUsetFAULTMASK\b0 }}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{uint{3}{2}_t}} {\cf2{newFAULTMASK}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{uint{3}{2}_t}} {\cf2{}}{\cf16{\b CPUgetPRIMASK_cpsid\b0 }}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{void}} {\cf2{}}{\cf16{\b CPUsetPRIMASK\b0 }}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{uint{3}{2}_t}} {\cf2{newPRIMASK}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static uint{3}{2}_t}} {\cf2{}}{\cf16{\b __disable_fault_irq\b0 }}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static uint{3}{2}_t}} {\cf2{}}{\cf16{\b __enable_fault_irq\b0 }}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf8{#define EnterCritical()	\{ _PRIMASK_temp = CPUgetPRIMASK_cpsid(); \}}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#define ExitCritical() \{ CPUsetPRIMASK(_PRIMASK_temp); \}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{}\par\pard
\cbpat1{{\cf6{/* Rate constants for programming the SysTick Period to generate tick interrupts.}}}\par\pard
\cbpat1{{\cf6{   These assume an {4}{0}MHz configuration, they are the values to be used to program}}}\par\pard
\cbpat1{{\cf6{   the SysTick Reload Value (STRELOAD) register. STRELOAD is {2}{4}-bits wide and so}}}\par\pard
\cbpat1{{\cf6{   the highest value is {0}xFFFFFF ({1}{6},{7}{7}{7},{2}{1}{6}) which equates to}}}\par\pard
\cbpat1{{\cf6{   {1}{6}{7}{7}{7}{2}{1}{6}*{1}{0}{0}{0}/{4}{0}{0}{0}{0}{0}{0}{0} = {4}{1}{9}.{4} mS.}}}\par\pard
\cbpat1{{\cf6{ */}}{\cf2{}}}\par\pard
\cbpat1{{\cf15{typedef}} {\cf2{}}{\cf14{enum}} {\cf2{}}{\cf11{\{}}	{\cf2{ES_Timer_RATE_OFF}}  	{\cf11{=   (}}{\cf2{}}{\cf4{{0}}}{\cf2{}}{\cf11{),}}}\par\pard
\cbpat1{{\cf2{				ES_Timer_RATE_{1}{0}{0}uS}} {\cf11{=}} {\cf2{}}{\cf4{{4}{0}{0}{0}}}{\cf2{}}{\cf11{,}}}\par\pard
\cbpat1{{\cf2{				ES_Timer_RATE_{5}{0}{0}uS}} {\cf11{=}} {\cf2{}}{\cf4{{2}{0}{0}{0}{0}}}{\cf2{}}{\cf11{,}}}\par\pard
\cbpat1{{\cf2{				ES_Timer_RATE_{1}mS}}	{\cf11{=}} {\cf2{}}{\cf4{{4}{0}{0}{0}{0}}}{\cf2{}}{\cf11{,}}}\par\pard
\cbpat1{{\cf2{				ES_Timer_RATE_{2}mS}}	{\cf11{=}} {\cf2{}}{\cf4{{8}{0}{0}{0}{0}}}{\cf2{}}{\cf11{,}}}\par\pard
\cbpat1{{\cf2{				ES_Timer_RATE_{4}mS}}	{\cf11{=}} {\cf2{}}{\cf4{{1}{6}{0}{0}{0}{0}}}{\cf2{}}{\cf11{,}}}\par\pard
\cbpat1{{\cf2{				ES_Timer_RATE_{5}mS}}	{\cf11{=}} {\cf2{}}{\cf4{{2}{0}{0}{0}{0}{0}}}{\cf2{}}{\cf11{,}}}\par\pard
\cbpat1{{\cf2{				ES_Timer_RATE_{8}mS}}	{\cf11{=}} {\cf2{}}{\cf4{{3}{2}{0}{0}{0}{0}}}{\cf2{}}{\cf11{,}}}\par\pard
\cbpat1{{\cf2{				ES_Timer_Rate_{1}{0}mS}}	{\cf11{=}} {\cf2{}}{\cf4{{4}{0}{0}{0}{0}{0}}}{\cf2{}}{\cf11{,}}}\par\pard
\cbpat1{{\cf2{				ES_Timer_Rate_{1}{6}mS}}	{\cf11{=}} {\cf2{}}{\cf4{{6}{4}{0}{0}{0}{0}}}{\cf2{}}{\cf11{,}}}\par\pard
\cbpat1{{\cf2{				ES_Timer_Rate_{3}{2}mS}}	{\cf11{=}} {\cf2{}}{\cf4{{1}{2}{8}{0}{0}{0}{0}}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}} {\cf2{TimerRate_t}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf5{// map the generic functions for testing the serial port to actual functions }}}\par\pard
\cbpat1{{\cf2{}}{\cf5{// for this platform. If the C compiler does not provide functions to test}}}\par\pard
\cbpat1{{\cf2{}}{\cf5{// and retrieve serial characters, you should write them in ES_Port.c}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#define IsNewKeyReady()  ( kbhit() != {0} )}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#define GetNewKey()      getchar()}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf5{// prototypes for the hardware specific routines}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{void}} {\cf2{}}{\cf16{\b _HW_Timer_Init\b0 }}{\cf2{}}{\cf11{(}}{\cf2{TimerRate_t Rate}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{bool}} {\cf2{}}{\cf16{\b _HW_Process_Pending_Ints\b0 }}{\cf2{}}{\cf11{(}} {\cf2{}}{\cf14{void}} {\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{uint{1}{6}_t}} {\cf2{}}{\cf16{\b _HW_GetTickCount\b0 }}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{void}} {\cf2{}}{\cf16{\b ConsoleInit\b0 }}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf8{#if defined(ccs)}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static uint{3}{2}_t}} {\cf2{}}{\cf16{\b __disable_fault_irq\b0 }}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{// Read faultmask and disable fault handlers and interrupts}}}\par\pard
\cbpat1{{\cf2{}}    {\cf16{\b __asm\b0 }}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf3{"    mrs     r{0}, faultmask;	Store FAULTMASK in r{0}}}{\cf7{\\n}}{\cf3{"}}{\cf2{}}}\par\pard
\cbpat1{    	    {\cf3{"    cpsid   f			;	Disable interrupts}}{\cf7{\\n}}{\cf3{"}}{\cf2{}}}\par\pard
\cbpat1{          {\cf3{"    bx      lr			;	Return from function}}{\cf7{\\n}}{\cf3{"}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{    {\cf6{/* Used to satisfy compiler. Actual return in r{0} */}}{\cf2{}}}\par\pard
\cbpat1{	{\cf13{return}} {\cf2{}}{\cf4{{0}}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf14{static uint{3}{2}_t}} {\cf2{}}{\cf16{\b __enable_fault_irq\b0 }}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}	{\cf5{// Read faultmask and enable fault handlers and interrupts}}}\par\pard
\cbpat1{{\cf2{}}    {\cf16{\b __asm\b0 }}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf3{"    mrs     r{0}, faultmask;	Store FAULTMASK in r{0}}}{\cf7{\\n}}{\cf3{"}}{\cf2{}}}\par\pard
\cbpat1{    	    {\cf3{"    cpsie   f			;	Enable interrupts}}{\cf7{\\n}}{\cf3{"}}{\cf2{}}}\par\pard
\cbpat1{          {\cf3{"    bx      lr			;	Return from function}}{\cf7{\\n}}{\cf3{"}}{\cf2{}}{\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{    {\cf6{/* Used to satisfy compiler. Actual return in r{0} */}}{\cf2{}}}\par\pard
\cbpat1{	{\cf13{return}} {\cf2{}}{\cf4{{0}}}{\cf2{}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#endif}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf8{#if defined(rvmdk) || defined(__ARMCC_VERSION)}}}\par\pard
\cbpat1{{\cf2{}}{\cf14{static uint{3}{2}_t}} {\cf2{}}{\cf16{\b __enable_fault_irq\b0 }}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}  {\cf14{uint{3}{2}_t}} {\cf2{r{0}}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{  __asm}}}\par\pard
\cbpat1{  {\cf11{\{}}}\par\pard
\cbpat1{{\cf2{    mrs     r{0}}}{\cf11{,}} {\cf2{FAULTMASK}}{\cf11{;}}	{\cf2{}}{\cf5{// Store FAULTMASK in r{0}}}}\par\pard
\cbpat1{{\cf2{    cpsie   f}}{\cf11{;}}				      {\cf2{}}{\cf5{// Disable interrupts}}}\par\pard
\cbpat1{{\cf2{}}  {\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}  {\cf13{return}} {\cf2{r{0}}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{}\par\pard
\cbpat1{{\cf14{static uint{3}{2}_t}} {\cf2{}}{\cf16{\b __disable_fault_irq\b0 }}{\cf2{}}{\cf11{(}}{\cf2{}}{\cf14{void}}{\cf2{}}{\cf11{)}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\{}}}\par\pard
\cbpat1{{\cf2{}}  {\cf14{uint{3}{2}_t}} {\cf2{r{0}}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{  __asm}}}\par\pard
\cbpat1{  {\cf11{\{}}}\par\pard
\cbpat1{{\cf2{    mrs     r{0}}}{\cf11{,}} {\cf2{FAULTMASK}}{\cf11{;}}	{\cf2{}}{\cf5{// Store FAULTMASK in r{0}}}}\par\pard
\cbpat1{{\cf2{    cpsid   f}}{\cf11{;}}				      {\cf2{}}{\cf5{// Disable interrupts}}}\par\pard
\cbpat1{{\cf2{}}  {\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}  {\cf13{return}} {\cf2{r{0}}}{\cf11{;}}}\par\pard
\cbpat1{{\cf2{}}{\cf11{\}}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#endif}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf8{#endif}} {\cf6{/* ES_PORT_H */}}{\cf8{}}{\cf2{}}}\par\pard
\cbpat1{}}
