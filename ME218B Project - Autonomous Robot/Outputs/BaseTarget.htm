<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Outputs\BaseTarget.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Outputs\BaseTarget.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5040049: Last Updated: Wed Mar 04 12:24:00 2015
<BR><P>
<H3>Maximum Stack Usage =        248 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
RunStrategySM &rArr;  RunStrategySM (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[22]">Reset_Handler</a>
 <LI><a href="#[4f]">__user_initial_stackheap</a>
 <LI><a href="#[4]">NmiSR</a>
 <LI><a href="#[5]">FaultISR</a>
 <LI><a href="#[6]">IntDefaultHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[17]">RunComServiceSM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">RunComServiceSM</a><BR>
 <LI><a href="#[96]">RunZoneTwoSM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[96]">RunZoneTwoSM</a><BR>
 <LI><a href="#[98]">RunZoneThreeSM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[98]">RunZoneThreeSM</a><BR>
 <LI><a href="#[94]">RunZoneOneSM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[94]">RunZoneOneSM</a><BR>
 <LI><a href="#[9a]">RunZoneFourSM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9a]">RunZoneFourSM</a><BR>
 <LI><a href="#[9c]">RunZoneFiveSM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9c]">RunZoneFiveSM</a><BR>
 <LI><a href="#[1b]">RunStrategySM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">RunStrategySM</a><BR>
 <LI><a href="#[19]">RunUpdateSM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">RunUpdateSM</a><BR>
 <LI><a href="#[92]">RunSendCommandSM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[92]">RunSendCommandSM</a><BR>
 <LI><a href="#[8f]">RunSendByteSM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8f]">RunSendByteSM</a><BR>
 <LI><a href="#[b9]">UARTCharPut</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b9]">UARTCharPut</a><BR>
 <LI><a href="#[4]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NmiSR</a><BR>
 <LI><a href="#[5]">FaultISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">FaultISR</a><BR>
 <LI><a href="#[6]">IntDefaultHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">IntDefaultHandler</a><BR>
 <LI><a href="#[3c]">SysCtlDelay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">SysCtlDelay</a><BR>
 <LI><a href="#[3b]">_sys_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3b]">_sys_exit</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[9]">BeaconSenseResponse</a> from beaconsense.o(i.BeaconSenseResponse) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[12]">Check4Keystroke</a> from eventcheckers.o(i.Check4Keystroke) referenced from es_checkevents.o(.constdata)
 <LI><a href="#[13]">CheckTapeStatus</a> from eventcheckers.o(i.CheckTapeStatus) referenced from es_checkevents.o(.constdata)
 <LI><a href="#[5]">FaultISR</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[d]">FollowTapeResponse</a> from followtape.o(i.FollowTapeResponse) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[16]">InitComServiceSM</a> from comservicesm.o(i.InitComServiceSM) referenced from es_framework.o(.constdata)
 <LI><a href="#[14]">InitMapKeys</a> from mapkeys.o(i.InitMapKeys) referenced from es_framework.o(.constdata)
 <LI><a href="#[1a]">InitStrategySM</a> from strategysm.o(i.InitStrategySM) referenced from es_framework.o(.constdata)
 <LI><a href="#[1c]">InitTurningFSM</a> from turnfsm.o(i.InitTurningFSM) referenced from es_framework.o(.constdata)
 <LI><a href="#[18]">InitUpdateSM</a> from updatesm.o(i.InitUpdateSM) referenced from es_framework.o(.constdata)
 <LI><a href="#[6]">IntDefaultHandler</a> from startup_rvmdk.o(RESET) referenced 106 times from startup_rvmdk.o(RESET)
 <LI><a href="#[4]">NmiSR</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[21]">PostComServiceSM</a> from comservicesm.o(i.PostComServiceSM) referenced from es_timers.o(.constdata)
 <LI><a href="#[1f]">PostStrategySM</a> from strategysm.o(i.PostStrategySM) referenced 4 times from es_timers.o(.constdata)
 <LI><a href="#[20]">PostTurningFSM</a> from turnfsm.o(i.PostTurningFSM) referenced from es_timers.o(.constdata)
 <LI><a href="#[1e]">PostUpdateSM</a> from updatesm.o(i.PostUpdateSM) referenced from es_timers.o(.constdata)
 <LI><a href="#[22]">Reset_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[17]">RunComServiceSM</a> from comservicesm.o(i.RunComServiceSM) referenced from es_framework.o(.constdata)
 <LI><a href="#[15]">RunMapKeys</a> from mapkeys.o(i.RunMapKeys) referenced from es_framework.o(.constdata)
 <LI><a href="#[1b]">RunStrategySM</a> from strategysm.o(i.RunStrategySM) referenced from es_framework.o(.constdata)
 <LI><a href="#[1d]">RunTurningFSM</a> from turnfsm.o(i.RunTurningFSM) referenced from es_framework.o(.constdata)
 <LI><a href="#[19]">RunUpdateSM</a> from updatesm.o(i.RunUpdateSM) referenced from es_framework.o(.constdata)
 <LI><a href="#[7]">SysTickIntHandler</a> from es_port.o(i.SysTickIntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[f]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[11]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[a]">encoderLeftResponse</a> from encoderleft.o(i.encoderLeftResponse) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[b]">encoderRightResponse</a> from encoderright.o(i.encoderRightResponse) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[10]">fputc</a> from retarget.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[e]">speedControlResponse</a> from speedcontrol.o(i.speedControlResponse) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[8]">transmitEndResponse</a> from spi.o(i.transmitEndResponse) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[c]">ultrasoundSenseResponse</a> from ultrasoundsense.o(i.ultrasoundSenseResponse) referenced from startup_rvmdk.o(RESET)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[22]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[23]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[24]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[26]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[d6]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[d7]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[d8]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[d9]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[da]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[27]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[44]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[29]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[2a]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[db]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[34]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[2c]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[dc]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[2e]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[dd]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[de]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[df]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[30]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[e0]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[e1]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[e2]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[e3]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[e4]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[e5]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[e6]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[e7]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[e8]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[e9]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[ea]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[eb]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[ec]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[ed]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[ee]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[39]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[ef]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[f0]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[f1]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[f2]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[f3]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[f4]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[25]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[f5]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[31]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[33]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[f6]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[35]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[f7]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[50]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[38]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[f8]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[3a]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3c]"></a>SysCtlDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>

<P><STRONG><a name="[f9]"></a>CPUcpsid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[fa]"></a>CPUprimask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[8b]"></a>CPUcpsie</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>

<P><STRONG><a name="[fb]"></a>CPUwfi</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[fc]"></a>CPUbasepriSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[fd]"></a>CPUbasepriGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[4f]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[fe]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speedControlResponse
</UL>

<P><STRONG><a name="[3d]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[3f]"></a>toupper</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, toupper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMapKeys
</UL>

<P><STRONG><a name="[41]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneTwoSM
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneThreeSM
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneOneSM
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneFourSM
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneFiveSM
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStrategySM
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateGameStatus
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartComServiceSM
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeKartStatus
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check4Keystroke
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTurningFSM
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTurningFSM
</UL>

<P><STRONG><a name="[43]"></a>__printf</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[4a]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[28]"></a>_printf_int_dec</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[46]"></a>getc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, getc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getc &rArr; fgetc &rArr; TERMIO_GetChar &rArr; UARTgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check4Keystroke
</UL>

<P><STRONG><a name="[48]"></a>puts</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, puts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[100]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>

<P><STRONG><a name="[3e]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[103]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[49]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[4b]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[2b]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[42]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[2f]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[4c]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[104]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[105]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[37]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[cc]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[81]"></a>ADC_MultiInit</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, admulti.o(i.ADC_MultiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_MultiInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFollowTape
</UL>

<P><STRONG><a name="[5b]"></a>ADC_MultiRead</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, admulti.o(i.ADC_MultiRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_MultiRead
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FollowTapeResponse
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTapeStatus
</UL>

<P><STRONG><a name="[51]"></a>ActivateBackGate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, shooter.o(i.ActivateBackGate))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openGateBack
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeGateBack
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneThreeSM
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitShooter
</UL>

<P><STRONG><a name="[54]"></a>ActivateFrontGate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, shooter.o(i.ActivateFrontGate))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openGateFront
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeGateFront
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneThreeSM
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitShooter
</UL>

<P><STRONG><a name="[57]"></a>AlignWithBeacon</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drive.o(i.AlignWithBeacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AlignWithBeacon &rArr; TurnKart &rArr; countEdges
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnKart
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maskBeaconInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneThreeSM
</UL>

<P><STRONG><a name="[9]"></a>BeaconSenseResponse</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, beaconsense.o(i.BeaconSenseResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BeaconSenseResponse &rArr; PostStrategySM &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostStrategySM
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maskBeaconInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>CPUgetPRIMASK_cpsid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, es_port.o(i.CPUgetPRIMASK_cpsid))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_EnQueueFIFO
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_DeQueue
</UL>

<P><STRONG><a name="[63]"></a>CPUsetPRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, es_port.o(i.CPUsetPRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_EnQueueFIFO
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_DeQueue
</UL>

<P><STRONG><a name="[12]"></a>Check4Keystroke</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, eventcheckers.o(i.Check4Keystroke))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Check4Keystroke &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kbhit
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostStrategySM
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_checkevents.o(.constdata)
</UL>
<P><STRONG><a name="[13]"></a>CheckTapeStatus</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, eventcheckers.o(i.CheckTapeStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CheckTapeStatus &rArr; PostStrategySM &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostStrategySM
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_MultiRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_checkevents.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>DriveDistance</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, drive.o(i.DriveDistance))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DriveDistance &rArr; countEdges
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countEdges
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriveReverse
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriveForward
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneTwoSM
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneOneSM
</UL>

<P><STRONG><a name="[5f]"></a>DriveForward</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, drive.o(i.DriveForward))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWMDutyDrive
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriveDistance
</UL>

<P><STRONG><a name="[5d]"></a>DriveReverse</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drive.o(i.DriveReverse))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWMDutyDrive
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriveDistance
</UL>

<P><STRONG><a name="[6c]"></a>ES_CheckUserEvents</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, es_checkevents.o(i.ES_CheckUserEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ES_CheckUserEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Run
</UL>

<P><STRONG><a name="[61]"></a>ES_DeQueue</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, es_queue.o(i.ES_DeQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ES_DeQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUsetPRIMASK
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUgetPRIMASK_cpsid
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Run
</UL>

<P><STRONG><a name="[64]"></a>ES_EnQueueFIFO</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, es_queue.o(i.ES_EnQueueFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUsetPRIMASK
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUgetPRIMASK_cpsid
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
</UL>

<P><STRONG><a name="[6a]"></a>ES_GetMSBitSet</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, es_lookuptables.o(i.ES_GetMSBitSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ES_GetMSBitSet
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Run
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_Tick_Resp
</UL>

<P><STRONG><a name="[67]"></a>ES_InitQueue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, es_queue.o(i.ES_InitQueue))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Initialize
</UL>

<P><STRONG><a name="[65]"></a>ES_Initialize</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, es_framework.o(i.ES_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ES_Initialize &rArr; ES_Timer_Init &rArr; _HW_Timer_Init &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_InitQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>ES_PostToService</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, es_framework.o(i.ES_PostToService))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_EnQueueFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostUpdateSM
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostTurningFSM
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostComServiceSM
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostStrategySM
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTurningFSM
</UL>

<P><STRONG><a name="[69]"></a>ES_Run</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, es_framework.o(i.ES_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ES_Run &rArr; _HW_Process_Pending_Ints &rArr; ES_Timer_Tick_Resp &rArr; ES_GetMSBitSet
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HW_Process_Pending_Ints
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_GetMSBitSet
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_DeQueue
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_CheckUserEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>ES_Timer_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, es_timers.o(i.ES_Timer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ES_Timer_Init &rArr; _HW_Timer_Init &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HW_Timer_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Initialize
</UL>

<P><STRONG><a name="[8c]"></a>ES_Timer_InitTimer</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, es_timers.o(i.ES_Timer_InitTimer))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneThreeSM
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneFourSM
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunSendByteSM
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunComServiceSM
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTurningFSM
</UL>

<P><STRONG><a name="[6e]"></a>ES_Timer_Tick_Resp</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, es_timers.o(i.ES_Timer_Tick_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ES_Timer_Tick_Resp &rArr; ES_GetMSBitSet
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_GetMSBitSet
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HW_Process_Pending_Ints
</UL>

<P><STRONG><a name="[6f]"></a>FollowTape</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drive.o(i.FollowTape))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FollowTape
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNominalTapeFollowDuty
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;followTapeInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMotor
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneTwoSM
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneOneSM
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneFourSM
</UL>

<P><STRONG><a name="[d]"></a>FollowTapeResponse</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, followtape.o(i.FollowTapeResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FollowTapeResponse &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWMDutyDrive
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_MultiRead
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>GPIODirModeSet</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio.o(i.GPIODirModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
</UL>

<P><STRONG><a name="[78]"></a>GPIOPadConfigSet</STRONG> (Thumb, 314 bytes, Stack size 28 bytes, gpio.o(i.GPIOPadConfigSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
</UL>

<P><STRONG><a name="[b5]"></a>GPIOPinConfigure</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_Init
</UL>

<P><STRONG><a name="[76]"></a>GPIOPinTypeUART</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIOPinTypeUART &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_Init
</UL>

<P><STRONG><a name="[16]"></a>InitComServiceSM</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, comservicesm.o(i.InitComServiceSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = InitComServiceSM &rArr; StartComServiceSM &rArr; initializeKartStatus &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartComServiceSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>InitDrive</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, drive.o(i.InitDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InitDrive &rArr; InitFollowTape &rArr; ADC_MultiInit
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWMDrive
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFollowTape
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSpeedControl
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initEncoderRight
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initEncoderLeft
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBeaconSense
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStrategySM
</UL>

<P><STRONG><a name="[7c]"></a>InitFollowTape</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, followtape.o(i.InitFollowTape))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InitFollowTape &rArr; ADC_MultiInit
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWMDutyDrive
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_MultiInit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;followTapeInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDrive
</UL>

<P><STRONG><a name="[14]"></a>InitMapKeys</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mapkeys.o(i.InitMapKeys))
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>InitPWMDrive</STRONG> (Thumb, 202 bytes, Stack size 0 bytes, pwmdemo.o(i.InitPWMDrive))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDrive
</UL>

<P><STRONG><a name="[84]"></a>InitPWMGates</STRONG> (Thumb, 206 bytes, Stack size 0 bytes, pwmdemo.o(i.InitPWMGates))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitShooter
</UL>

<P><STRONG><a name="[83]"></a>InitPWMShooter</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, pwmdemo.o(i.InitPWMShooter))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitShooter
</UL>

<P><STRONG><a name="[82]"></a>InitShooter</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, shooter.o(i.InitShooter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitShooter
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWMDutyShooter
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWMShooter
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPWMGates
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateFrontGate
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateBackGate
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStrategySM
</UL>

<P><STRONG><a name="[1a]"></a>InitStrategySM</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, strategysm.o(i.InitStrategySM))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = InitStrategySM &rArr; StartStrategySM &rArr; RunStrategySM &rArr;  RunStrategySM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMotor
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitShooter
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDrive
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartStrategySM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[1c]"></a>InitTurningFSM</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, turnfsm.o(i.InitTurningFSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = InitTurningFSM &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[18]"></a>InitUpdateSM</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, updatesm.o(i.InitUpdateSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = InitUpdateSM &rArr; StartUpdateSM &rArr; RunUpdateSM &rArr;  RunUpdateSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUpdateSM
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSPI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>IntMasterEnable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HW_Timer_Init
</UL>

<P><STRONG><a name="[a6]"></a>ObstacleCompletionStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, strategysm.o(i.ObstacleCompletionStatus))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneFourSM
</UL>

<P><STRONG><a name="[21]"></a>PostComServiceSM</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, comservicesm.o(i.PostComServiceSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PostComServiceSM &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunComServiceSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_timers.o(.constdata)
</UL>
<P><STRONG><a name="[1f]"></a>PostStrategySM</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, strategysm.o(i.PostStrategySM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PostStrategySM &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOurKartStatus
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posDataUpdate
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determineZone
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTapeStatus
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check4Keystroke
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTurningFSM
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeaconSenseResponse
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encoderLeftResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_timers.o(.constdata)
</UL>
<P><STRONG><a name="[20]"></a>PostTurningFSM</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, turnfsm.o(i.PostTurningFSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PostTurningFSM &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneTwoSM
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneThreeSM
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneOneSM
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneFourSM
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOurKartStatus
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posDataUpdate
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTurningFSM
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encoderLeftResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_timers.o(.constdata)
</UL>
<P><STRONG><a name="[1e]"></a>PostUpdateSM</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, updatesm.o(i.PostUpdateSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PostUpdateSM &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_PostToService
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunUpdateSM
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmitEndResponse
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunSendCommandSM
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunComServiceSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_timers.o(.constdata)
</UL>
<P><STRONG><a name="[17]"></a>RunComServiceSM</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, comservicesm.o(i.RunComServiceSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + In Cycle
<LI>Call Chain = RunComServiceSM &rArr;  RunComServiceSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostUpdateSM
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_InitTimer
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunComServiceSM
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostComServiceSM
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOurKartStatus
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posDataUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartComServiceSM
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunComServiceSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[15]"></a>RunMapKeys</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mapkeys.o(i.RunMapKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RunMapKeys &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>RunSendByteSM</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, sendbytesm.o(i.RunSendByteSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = RunSendByteSM &rArr;  RunSendByteSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendData
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiveData
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunSendByteSM
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_InitTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunSendCommandSM
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSendByteSM
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunSendByteSM
</UL>

<P><STRONG><a name="[92]"></a>RunSendCommandSM</STRONG> (Thumb, 658 bytes, Stack size 32 bytes, sendcommandsm.o(i.RunSendCommandSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = RunSendCommandSM &rArr;  RunSendCommandSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunSendCommandSM
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSendByteSM
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunSendByteSM
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostUpdateSM
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunUpdateSM
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSendCommandSM
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunSendCommandSM
</UL>

<P><STRONG><a name="[1b]"></a>RunStrategySM</STRONG> (Thumb, 576 bytes, Stack size 40 bytes, strategysm.o(i.RunStrategySM))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = RunStrategySM &rArr;  RunStrategySM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMotor
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopFlyWheel
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartZoneTwoSM
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartZoneThreeSM
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartZoneOneSM
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartZoneFourSM
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartZoneFiveSM
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneTwoSM
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneThreeSM
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneOneSM
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneFourSM
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneFiveSM
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStrategySM
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateGameStatus
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartStrategySM
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStrategySM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[1d]"></a>RunTurningFSM</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, turnfsm.o(i.RunTurningFSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = RunTurningFSM &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnKart
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMotor
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostTurningFSM
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_InitTimer
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOurKartAbsoluteOrientation
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostStrategySM
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[19]"></a>RunUpdateSM</STRONG> (Thumb, 466 bytes, Stack size 32 bytes, updatesm.o(i.RunUpdateSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + In Cycle
<LI>Call Chain = RunUpdateSM &rArr;  RunUpdateSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunUpdateSM
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSendCommandSM
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunSendCommandSM
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostUpdateSM
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUpdateSM
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunUpdateSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es_framework.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>RunZoneFiveSM</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, zonefivesm.o(i.RunZoneFiveSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = RunZoneFiveSM &rArr;  RunZoneFiveSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableSpeedControl
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneFiveSM
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setZonesForAlign
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setListenToCrossOverPoint
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setComeListenToPostFive
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartZoneFiveSM
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneFiveSM
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStrategySM
</UL>

<P><STRONG><a name="[9a]"></a>RunZoneFourSM</STRONG> (Thumb, 390 bytes, Stack size 40 bytes, zonefoursm.o(i.RunZoneFourSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = RunZoneFourSM &rArr;  RunZoneFourSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTargetOrientation
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableSpeedControl
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FollowTape
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMotor
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneFourSM
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLapsRemaining
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ObstacleCompletionStatus
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWMDutyDrive
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostTurningFSM
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_InitTimer
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setZonesForAlign
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMiddleOfObstacle
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getKartBZone
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getKartAZone
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countEdges
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartZoneFourSM
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneFourSM
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStrategySM
</UL>

<P><STRONG><a name="[94]"></a>RunZoneOneSM</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, zoneonesm.o(i.RunZoneOneSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = RunZoneOneSM &rArr;  RunZoneOneSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTargetOrientation
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableSpeedControl
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnKart
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FollowTape
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriveDistance
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMotor
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneOneSM
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostTurningFSM
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setZonesForAlign
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCheckTapeFound
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartZoneOneSM
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneOneSM
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStrategySM
</UL>

<P><STRONG><a name="[98]"></a>RunZoneThreeSM</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, zonethreesm.o(i.RunZoneThreeSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = RunZoneThreeSM &rArr;  RunZoneThreeSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTargetOrientation
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableSpeedControl
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnKart
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMotor
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopFlyWheel
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneThreeSM
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLapsRemaining
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostTurningFSM
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_InitTimer
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setZonesForAlign
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartFlyWheel
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateFrontGate
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateBackGate
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countEdges
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlignWithBeacon
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartZoneThreeSM
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneThreeSM
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStrategySM
</UL>

<P><STRONG><a name="[96]"></a>RunZoneTwoSM</STRONG> (Thumb, 424 bytes, Stack size 32 bytes, zonetwosm.o(i.RunZoneTwoSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = RunZoneTwoSM &rArr;  RunZoneTwoSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTargetOrientation
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableSpeedControl
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FollowTape
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriveDistance
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMotor
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneTwoSM
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLapsRemaining
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetCompletionStatus
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostTurningFSM
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setZonesForAlign
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getKartBZone
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getKartAZone
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCheckTapeFound
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countEdges
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartZoneTwoSM
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneTwoSM
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStrategySM
</UL>

<P><STRONG><a name="[60]"></a>SetPWMDutyDrive</STRONG> (Thumb, 306 bytes, Stack size 0 bytes, pwmdemo.o(i.SetPWMDutyDrive))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnKart
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMotor
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneFourSM
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFollowTape
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FollowTapeResponse
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speedControlResponse
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriveReverse
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriveForward
</UL>

<P><STRONG><a name="[85]"></a>SetPWMDutyShooter</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, pwmdemo.o(i.SetPWMDutyShooter))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopFlyWheel
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitShooter
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartFlyWheel
</UL>

<P><STRONG><a name="[79]"></a>StartComServiceSM</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, comservicesm.o(i.StartComServiceSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = StartComServiceSM &rArr; initializeKartStatus &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunComServiceSM
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeKartStatus
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitComServiceSM
</UL>

<P><STRONG><a name="[ad]"></a>StartFlyWheel</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, shooter.o(i.StartFlyWheel))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWMDutyShooter
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneThreeSM
</UL>

<P><STRONG><a name="[93]"></a>StartSendByteSM</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sendbytesm.o(i.StartSendByteSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = StartSendByteSM &rArr; RunSendByteSM &rArr;  RunSendByteSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunSendByteSM
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunSendCommandSM
</UL>

<P><STRONG><a name="[a1]"></a>StartSendCommandSM</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sendcommandsm.o(i.StartSendCommandSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = StartSendCommandSM &rArr; RunSendCommandSM &rArr;  RunSendCommandSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunSendCommandSM
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunUpdateSM
</UL>

<P><STRONG><a name="[87]"></a>StartStrategySM</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, strategysm.o(i.StartStrategySM))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = StartStrategySM &rArr; RunStrategySM &rArr;  RunStrategySM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStrategySM
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStrategySM
</UL>

<P><STRONG><a name="[89]"></a>StartUpdateSM</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, updatesm.o(i.StartUpdateSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = StartUpdateSM &rArr; RunUpdateSM &rArr;  RunUpdateSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunUpdateSM
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUpdateSM
</UL>

<P><STRONG><a name="[9e]"></a>StartZoneFiveSM</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, zonefivesm.o(i.StartZoneFiveSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = StartZoneFiveSM &rArr; RunZoneFiveSM &rArr;  RunZoneFiveSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneFiveSM
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStrategySM
</UL>

<P><STRONG><a name="[9b]"></a>StartZoneFourSM</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, zonefoursm.o(i.StartZoneFourSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = StartZoneFourSM &rArr; RunZoneFourSM &rArr;  RunZoneFourSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneFourSM
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStrategySM
</UL>

<P><STRONG><a name="[95]"></a>StartZoneOneSM</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, zoneonesm.o(i.StartZoneOneSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = StartZoneOneSM &rArr; RunZoneOneSM &rArr;  RunZoneOneSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneOneSM
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStrategySM
</UL>

<P><STRONG><a name="[99]"></a>StartZoneThreeSM</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, zonethreesm.o(i.StartZoneThreeSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = StartZoneThreeSM &rArr; RunZoneThreeSM &rArr;  RunZoneThreeSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneThreeSM
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStrategySM
</UL>

<P><STRONG><a name="[97]"></a>StartZoneTwoSM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, zonetwosm.o(i.StartZoneTwoSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = StartZoneTwoSM &rArr; RunZoneTwoSM &rArr;  RunZoneTwoSM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneTwoSM
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStrategySM
</UL>

<P><STRONG><a name="[9f]"></a>StopFlyWheel</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, shooter.o(i.StopFlyWheel))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWMDutyShooter
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneThreeSM
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStrategySM
</UL>

<P><STRONG><a name="[86]"></a>StopMotor</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, drive.o(i.StopMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = StopMotor &rArr; enableSpeedControl
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableSpeedControl
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FollowTape
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWMDutyDrive
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneTwoSM
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneThreeSM
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneOneSM
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneFourSM
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStrategySM
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStrategySM
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTurningFSM
</UL>

<P><STRONG><a name="[b0]"></a>SysCtlClockSet</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, sysctl.o(i.SysCtlClockSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysCtlClockSet
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_Init
</UL>

<P><STRONG><a name="[bc]"></a>SysTickEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickEnable))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HW_Timer_Init
</UL>

<P><STRONG><a name="[bb]"></a>SysTickIntEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HW_Timer_Init
</UL>

<P><STRONG><a name="[7]"></a>SysTickIntHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, es_port.o(i.SysTickIntHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>SysTickPeriodSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, systick.o(i.SysTickPeriodSet))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HW_Timer_Init
</UL>

<P><STRONG><a name="[b1]"></a>TERMIO_GetChar</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, termio.o(i.TERMIO_GetChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TERMIO_GetChar &rArr; UARTgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[b3]"></a>TERMIO_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, termio.o(i.TERMIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TERMIO_Init &rArr; GPIOPinTypeUART &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioConfig
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTClockSourceSet
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>TERMIO_PutChar</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, termio.o(i.TERMIO_PutChar))
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[ae]"></a>TargetCompletionStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, strategysm.o(i.TargetCompletionStatus))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneTwoSM
</UL>

<P><STRONG><a name="[59]"></a>TurnKart</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, drive.o(i.TurnKart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TurnKart &rArr; countEdges
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWMDutyDrive
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countEdges
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneThreeSM
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneOneSM
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTurningFSM
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlignWithBeacon
</UL>

<P><STRONG><a name="[b9]"></a>UARTCharPut</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(i.UARTCharPut))
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_PutChar
</UL>

<P><STRONG><a name="[b6]"></a>UARTClockSourceSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.UARTClockSourceSet))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_Init
</UL>

<P><STRONG><a name="[b7]"></a>UARTStdioConfig</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, uartstdio.o(i.UARTStdioConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UARTStdioConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_Init
</UL>

<P><STRONG><a name="[b2]"></a>UARTgetc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uartstdio.o(i.UARTgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_GetChar
</UL>

<P><STRONG><a name="[6b]"></a>_HW_Process_Pending_Ints</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, es_port.o(i._HW_Process_Pending_Ints))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _HW_Process_Pending_Ints &rArr; ES_Timer_Tick_Resp &rArr; ES_GetMSBitSet
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_Tick_Resp
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Run
</UL>

<P><STRONG><a name="[6d]"></a>_HW_Timer_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, es_port.o(i._HW_Timer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _HW_Timer_Init &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickPeriodSet
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntEnable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickEnable
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Timer_Init
</UL>

<P><STRONG><a name="[3b]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(i._sys_exit))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[53]"></a>closeGateBack</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pwmdemo.o(i.closeGateBack))
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPositionBack
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateBackGate
</UL>

<P><STRONG><a name="[56]"></a>closeGateFront</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pwmdemo.o(i.closeGateFront))
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPositionFront
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateFrontGate
</UL>

<P><STRONG><a name="[5e]"></a>countEdges</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drive.o(i.countEdges))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = countEdges
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startPosControlLeft
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maskLeftEncoder
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnKart
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriveDistance
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneTwoSM
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneThreeSM
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneFourSM
</UL>

<P><STRONG><a name="[a5]"></a>enableSpeedControl</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drive.o(i.enableSpeedControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = enableSpeedControl
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSpeedSetpoint
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setControlDirection
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maskSpeedControlInterrupt
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maskRightEncoder
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maskLeftEncoder
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMotor
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneTwoSM
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneThreeSM
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneOneSM
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneFourSM
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneFiveSM
</UL>

<P><STRONG><a name="[a]"></a>encoderLeftResponse</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, encoderleft.o(i.encoderLeftResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = encoderLeftResponse &rArr; PostTurningFSM &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostTurningFSM
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostStrategySM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>encoderRightResponse</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, encoderright.o(i.encoderRightResponse))
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>ferror</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget.o(i.ferror))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[47]"></a>fgetc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(i.fgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fgetc &rArr; TERMIO_GetChar &rArr; UARTgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_GetChar
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>

<P><STRONG><a name="[71]"></a>followTapeInterruptMask</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, followtape.o(i.followTapeInterruptMask))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FollowTape
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFollowTape
</UL>

<P><STRONG><a name="[10]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[c6]"></a>getDataByte</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sendbytesm.o(i.getDataByte))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOurKartStatus
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posDataUpdate
</UL>

<P><STRONG><a name="[a7]"></a>getKartAZone</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, comservicesm.o(i.getKartAZone))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneTwoSM
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneFourSM
</UL>

<P><STRONG><a name="[a8]"></a>getKartBZone</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, comservicesm.o(i.getKartBZone))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneTwoSM
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneFourSM
</UL>

<P><STRONG><a name="[a9]"></a>getLapsRemaining</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, strategysm.o(i.getLapsRemaining))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneTwoSM
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneThreeSM
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneFourSM
</UL>

<P><STRONG><a name="[a0]"></a>getOurKartAbsoluteOrientation</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, comservicesm.o(i.getOurKartAbsoluteOrientation))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunTurningFSM
</UL>

<P><STRONG><a name="[c7]"></a>getPeriodLeft</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, encoderleft.o(i.getPeriodLeft))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speedControlResponse
</UL>

<P><STRONG><a name="[ca]"></a>getPeriodRight</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, encoderright.o(i.getPeriodRight))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speedControlResponse
</UL>

<P><STRONG><a name="[91]"></a>getReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi.o(i.getReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunSendByteSM
</UL>

<P><STRONG><a name="[80]"></a>initBeaconSense</STRONG> (Thumb, 144 bytes, Stack size 4 bytes, beaconsense.o(i.initBeaconSense))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = initBeaconSense
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maskBeaconInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDrive
</UL>

<P><STRONG><a name="[7f]"></a>initEncoderLeft</STRONG> (Thumb, 144 bytes, Stack size 4 bytes, encoderleft.o(i.initEncoderLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = initEncoderLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maskLeftEncoder
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDrive
</UL>

<P><STRONG><a name="[7e]"></a>initEncoderRight</STRONG> (Thumb, 144 bytes, Stack size 4 bytes, encoderright.o(i.initEncoderRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = initEncoderRight
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maskRightEncoder
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDrive
</UL>

<P><STRONG><a name="[88]"></a>initSPI</STRONG> (Thumb, 290 bytes, Stack size 0 bytes, spi.o(i.initSPI))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUpdateSM
</UL>

<P><STRONG><a name="[7d]"></a>initSpeedControl</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, speedcontrol.o(i.initSpeedControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = initSpeedControl
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maskSpeedControlInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDrive
</UL>

<P><STRONG><a name="[5a]"></a>kbhit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, termio.o(i.kbhit))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check4Keystroke
</UL>

<P><STRONG><a name="[36]"></a>main</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, hsmtemplatemain.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = main &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TERMIO_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Run
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ES_Initialize
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[58]"></a>maskBeaconInterrupt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, beaconsense.o(i.maskBeaconInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeaconSenseResponse
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBeaconSense
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlignWithBeacon
</UL>

<P><STRONG><a name="[bf]"></a>maskLeftEncoder</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, encoderleft.o(i.maskLeftEncoder))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableSpeedControl
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initEncoderLeft
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countEdges
</UL>

<P><STRONG><a name="[c4]"></a>maskRightEncoder</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, encoderright.o(i.maskRightEncoder))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableSpeedControl
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initEncoderRight
</UL>

<P><STRONG><a name="[c5]"></a>maskSpeedControlInterrupt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, speedcontrol.o(i.maskSpeedControlInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableSpeedControl
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSpeedControl
</UL>

<P><STRONG><a name="[cb]"></a>maskUltrasoundInterrupt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ultrasoundsense.o(i.maskUltrasoundInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultrasoundSenseResponse
</UL>

<P><STRONG><a name="[52]"></a>openGateBack</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pwmdemo.o(i.openGateBack))
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPositionBack
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateBackGate
</UL>

<P><STRONG><a name="[55]"></a>openGateFront</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pwmdemo.o(i.openGateFront))
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPositionFront
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateFrontGate
</UL>

<P><STRONG><a name="[90]"></a>sendData</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, spi.o(i.sendData))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunSendByteSM
</UL>

<P><STRONG><a name="[ac]"></a>setCheckTapeFound</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eventcheckers.o(i.setCheckTapeFound))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneTwoSM
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneOneSM
</UL>

<P><STRONG><a name="[a4]"></a>setComeListenToPostFive</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, comservicesm.o(i.setComeListenToPostFive))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneFiveSM
</UL>

<P><STRONG><a name="[c3]"></a>setControlDirection</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speedcontrol.o(i.setControlDirection))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableSpeedControl
</UL>

<P><STRONG><a name="[a3]"></a>setListenToCrossOverPoint</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, comservicesm.o(i.setListenToCrossOverPoint))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneFiveSM
</UL>

<P><STRONG><a name="[aa]"></a>setMiddleOfObstacle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, comservicesm.o(i.setMiddleOfObstacle))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneFourSM
</UL>

<P><STRONG><a name="[70]"></a>setNominalTapeFollowDuty</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, followtape.o(i.setNominalTapeFollowDuty))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FollowTape
</UL>

<P><STRONG><a name="[c2]"></a>setSpeedSetpoint</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speedcontrol.o(i.setSpeedSetpoint))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableSpeedControl
</UL>

<P><STRONG><a name="[ab]"></a>setTargetOrientation</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, turnfsm.o(i.setTargetOrientation))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneTwoSM
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneThreeSM
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneOneSM
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneFourSM
</UL>

<P><STRONG><a name="[a2]"></a>setZonesForAlign</STRONG> (Thumb, 208 bytes, Stack size 20 bytes, comservicesm.o(i.setZonesForAlign))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = setZonesForAlign
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneTwoSM
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneThreeSM
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneOneSM
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneFourSM
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunZoneFiveSM
</UL>

<P><STRONG><a name="[e]"></a>speedControlResponse</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, speedcontrol.o(i.speedControlResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = speedControlResponse &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWMDutyDrive
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPeriodRight
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPeriodLeft
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>startPosControlLeft</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, encoderleft.o(i.startPosControlLeft))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countEdges
</UL>

<P><STRONG><a name="[8]"></a>transmitEndResponse</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, spi.o(i.transmitEndResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = transmitEndResponse &rArr; PostUpdateSM &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostUpdateSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>ultrasoundSenseResponse</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ultrasoundsense.o(i.ultrasoundSenseResponse))
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maskUltrasoundInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[75]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FollowTapeResponse
</UL>

<P><STRONG><a name="[cd]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FollowTapeResponse
</UL>

<P><STRONG><a name="[d0]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FollowTapeResponse
</UL>

<P><STRONG><a name="[106]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[73]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FollowTapeResponse
</UL>

<P><STRONG><a name="[d3]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[cf]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[d2]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[107]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[d4]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[108]"></a>__aeabi_ul2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[109]"></a>_ll_uto_f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[c9]"></a>__aeabi_l2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speedControlResponse
</UL>

<P><STRONG><a name="[10a]"></a>_ll_sto_f</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[2d]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[10b]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[10c]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[ce]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c1]"></a>determineZone</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, comservicesm.o(i.determineZone))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = determineZone &rArr; PostStrategySM &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostStrategySM
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posDataUpdate
</UL>

<P><STRONG><a name="[af]"></a>initializeKartStatus</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, comservicesm.o(i.initializeKartStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = initializeKartStatus &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartComServiceSM
</UL>

<P><STRONG><a name="[8e]"></a>posDataUpdate</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, comservicesm.o(i.posDataUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = posDataUpdate &rArr; determineZone &rArr; PostStrategySM &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataByte
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostTurningFSM
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determineZone
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostStrategySM
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunComServiceSM
</UL>

<P><STRONG><a name="[8d]"></a>updateOurKartStatus</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, comservicesm.o(i.updateOurKartStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = updateOurKartStatus &rArr; PostTurningFSM &rArr; ES_PostToService &rArr; ES_EnQueueFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataByte
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostTurningFSM
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostStrategySM
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunComServiceSM
</UL>

<P><STRONG><a name="[bd]"></a>setPositionBack</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, pwmdemo.o(i.setPositionBack))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openGateBack
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeGateBack
</UL>

<P><STRONG><a name="[be]"></a>setPositionFront</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, pwmdemo.o(i.setPositionFront))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openGateFront
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeGateFront
</UL>

<P><STRONG><a name="[9d]"></a>updateGameStatus</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, strategysm.o(i.updateGameStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = updateGameStatus &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStrategySM
</UL>

<P><STRONG><a name="[4]"></a>NmiSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>FaultISR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[d5]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[d1]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[11]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
