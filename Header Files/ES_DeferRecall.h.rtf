{\rtf1\ansi\uc0 \deff1{\fonttbl{\f1\fmodern\fprq1\fcharset0 Courier New;}}{\colortbl;\red255\green255\blue255;\red58\green57\blue53;\red255\green00\blue255;\red255\green00\blue255;\red00\green60\blue255;\red00\green60\blue255;\red255\green00\blue255;\red160\green32\blue240;\red255\green00\blue255;\red60\green59\blue55;\red58\green57\blue53;\red255\green00\blue255;\red165\green42\blue53;\red46\green139\blue87;\red87\green46\blue140;\red58\green57\blue53;}
\paperw11905\paperh16837\margl1134\margr1134\margt1134\margb1134\sectd\plain\f1\fs20
\pard \cbpat1{{\cf2{}}{\cf8{#ifndef DEFER_RECALL_H}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#define DEFER_RECALL_H}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf8{#include}} {\cf9{"ES_Queue.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}{\cf8{#include}} {\cf9{"ES_Events.h"}}{\cf8{}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf6{/****************************************************************************}}}\par\pard
\cbpat1{{\cf6{ Function}}}\par\pard
\cbpat1{{\cf6{   ES_InitDeferralQueueWith  (wrapper for ES_InitQueue )}}}\par\pard
\cbpat1{{\cf6{   this is a straight re-naming to aid readability }}}\par\pard
\cbpat1{{\cf6{ Parameters}}}\par\pard
\cbpat1{{\cf6{   EF_Event * pBlock : pointer to the block of memory to use for the Queue}}}\par\pard
\cbpat1{{\cf6{   unsigned char BlockSize: size of the block pointed to by pBlock}}}\par\pard
\cbpat1{{\cf6{ Returns}}}\par\pard
\cbpat1{{\cf6{   max number of entries in the created queue}}}\par\pard
\cbpat1{{\cf6{ Description}}}\par\pard
\cbpat1{{\cf6{   Initializes a queue structure at the beginning of the block of memory}}}\par\pard
\cbpat1{{\cf6{ Notes}}}\par\pard
\cbpat1{{\cf6{   you should pass it a block that is at least sizeof(ES_Queue_t) larger than }}}\par\pard
\cbpat1{{\cf6{   the number of entries that you want in the queue. Since the size of an }}}\par\pard
\cbpat1{{\cf6{   ES_Event (at {4} bytes; {2} enum, {2} param) is greater than the }}}\par\pard
\cbpat1{{\cf6{   sizeof(ES_Queue_t), you only need to declare an array of ES_Event}}}\par\pard
\cbpat1{{\cf6{   with {1} more element than you need for the actual queue.}}}\par\pard
\cbpat1{{\cf6{****************************************************************************/}}{\cf2{}}}\par\pard
\cbpat1{{\cf8{#define ES_InitDeferralQueueWith( a,b ) ES_InitQueue( a, b )}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf6{/****************************************************************************}}}\par\pard
\cbpat1{{\cf6{ Function}}}\par\pard
\cbpat1{{\cf6{   ES_DeferEvent  (wrapper for ES_EnQueueLIFO)}}}\par\pard
\cbpat1{{\cf6{   this is a straight re-naming to aid readability}}}\par\pard
\cbpat1{{\cf6{ Parameters}}}\par\pard
\cbpat1{{\cf6{   ES_Event * pBlock : pointer to the block of memory in use as the Queue}}}\par\pard
\cbpat1{{\cf6{   ES_Event Event{2}Add : event to be added to the Queue}}}\par\pard
\cbpat1{{\cf6{ Returns}}}\par\pard
\cbpat1{{\cf6{   bool : true if the add was successful, false if not}}}\par\pard
\cbpat1{{\cf6{ Description}}}\par\pard
\cbpat1{{\cf6{   if it will fit, adds Event{2}Add to the Queue}}}\par\pard
\cbpat1{{\cf6{ ***************************************************************************/}}{\cf2{}}}\par\pard
\cbpat1{{\cf8{#define ES_DeferEvent( a,b ) ES_EnQueueLIFO( a, b )}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf6{/****************************************************************************}}}\par\pard
\cbpat1{{\cf6{ Function}}}\par\pard
\cbpat1{{\cf6{     ES_RecallEvents}}}\par\pard
\cbpat1{{\cf6{ Parameters}}}\par\pard
\cbpat1{{\cf6{      uint{8}_t WhichService, number of the service to post Recalled event to}}}\par\pard
\cbpat1{{\cf6{      ES_Event * pBlock, pointer to the block of memory that implements the}}}\par\pard
\cbpat1{{\cf6{        Defer/Recall queue}}}\par\pard
\cbpat1{{\cf6{ Returns}}}\par\pard
\cbpat1{{\cf6{     bool true if an event was recalled, false if no event was left in queue}}}\par\pard
\cbpat1{{\cf6{ Description}}}\par\pard
\cbpat1{{\cf6{     pulls an event off the deferral queue if one is available. It there was}}}\par\pard
\cbpat1{{\cf6{     something in the queue, then it posts it LIFO fashion to the queue }}}\par\pard
\cbpat1{{\cf6{     indicated by WhichService}}}\par\pard
\cbpat1{{\cf6{ Notes}}}\par\pard
\cbpat1{{\cf6{     None.}}}\par\pard
\cbpat1{{\cf6{ Author}}}\par\pard
\cbpat1{{\cf6{     J. Edward Carryer, {1}{1}/{2}{0}/{1}{3} {1}{6}:{4}{9}}}}\par\pard
\cbpat1{{\cf6{****************************************************************************/}}{\cf2{}}}\par\pard
\cbpat1{{\cf14{bool}} {\cf2{}}{\cf16{\b ES_RecallEvents\b0 }}{\cf2{}}{\cf11{(}} {\cf2{}}{\cf14{uint{8}_t}} {\cf2{WhichService}}{\cf11{,}} {\cf2{ES_Event}} {\cf11{*}} {\cf2{pBlock}} {\cf11{);}}}\par\pard
\cbpat1{{\cf2{}}}\par\pard
\cbpat1{{\cf8{#endif}}{\cf2{}}}\par\pard
\cbpat1{}}
